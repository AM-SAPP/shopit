#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var sio = require('socket.io');
// var chat = require('../chat');
var debug = require('debug')('myntra-hack:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

console.log("Listening at port : ", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var Io = sio(server, {cors : "*"});

// ----------------------------------------------------------------------------------------------------------- io -----
const {generateMessage, generateLocationMessage} = require('../utils/messages');
const {addUser, removeUser, getUser, getusersInRoom} = require('../utils/users')

Io.on('connection', (socket) => {
  console.log('New web-socket connection');

  // socket.emit('message', generateMessage('welcome'))
  // socket.broadcast.emit('message', generateMessage('A new user has joined!')) // send message to every client except the newly joined client

  socket.on('join', ({username, room}, callback) => {
     const {error, user} =  addUser({id: socket.id , username, room})
      if(error){
          return callback(error)
      }
      //socket.join only allowed in server.... allows us to join the room
      socket.join(room)
      //io.to.emit   => send message to all in that room
      //socket.broadcast.to.emit  => send to all others except specific client in the room
      socket.emit('message', generateMessage('Admin','welcome'))
      socket.broadcast.to(user.room).emit('message', generateMessage('Admin', `${user.username} has joined the room`))
      Io.to(user.room).emit('roomData', {
          room: user.room,
          users: getusersInRoom(user.room)
      })
      callback()
  })

  socket.on('sendMessage', (message, callback)  => {
      const user = getUser(socket.id)

      //check for profanity or bad words in the message
      //  const filter = new Filter()
      //  if( filter.isProfane(message) ){
      //      return callback('Profanity is not allowed')
      //  }
      
      Io.to(user.room).emit('message',generateMessage(user.username, message))
      
      // callback('delivered') // send signal acknowlegement to the client that their work has beeen completed and the fuction provied on the client side will run 
      callback()
  })

  socket.on('product-share', (message, callback)  => {
    console.log("msg : ", message);
    let grp = message.split(",")[0];
    console.log(grp);

    Io.to(grp).emit('message', generateMessage("Shopit", message));

  });

  // send location to every client
  socket.on('sendLocation', (coords,callback)=> {
      const user = getUser(socket.id)
      // Io.emit('message', `Location: ${coords.latitude},${coords.longitude}`)
      Io.to(user.room).emit('locationMessage', generateLocationMessage( user.username, `https://google.com/maps?q=${coords.latitude},${coords.longitude}`)) //send location in link format
      callback()
  })

  //when a connection is closed.. using disconnect builtin event
  socket.on('disconnect', () => {
      const user = removeUser(socket.id) 
      if (user) {
          Io.to(user.room).emit('message', generateMessage('Admin', `${user.username} has left`)) // here we use io.emit coz.. the user is left, eventhough we send to everyone , the left client cant see the message
          Io.to(user.room).emit('roomData', {
              room: user.room,
              users: getusersInRoom(user.room)
          })
      }   
  })

});

// ----------------------------------------------------------------------------------------------------------- io -----

// io.on('connection', client => {
//   client.on('event', data => { console.log("event"); });
//   client.on('disconnect', () => { console.log("dis - event"); });
//   console.log("connected socket")
// });


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
